#!/usr/bin/env bash
# scripts/git-commit-roots-only.sh
# Commit and push only changes under hardcoded ALLOWED roots.
# - Errors out if there are untracked files *inside* ALLOWED roots.
# - Logs (but does not abort) if there are changes outside ALLOWED roots.
# - Creates an automatic commit message and pushes to origin.
#
# Run from anywhere inside a git repo.

set -euo pipefail

# -----------------------
# CONFIG: allowed roots
# -----------------------
# Edit these to match the allowed top-level directories in your repository.
# Paths are relative to repo root, without leading './' or trailing '/'.
ALLOWED=(
  "devex/editors/emacs"
)

# -----------------------
# sanity: inside a git repo?
# -----------------------
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || true)
if [[ -z "$REPO_ROOT" ]]; then
  echo "Error: this directory is not inside a git repository." >&2
  exit 2
fi
cd "$REPO_ROOT"

# normalize allowed roots
for i in "${!ALLOWED[@]}"; do
  ALLOWED[$i]=${ALLOWED[$i]#./}
  ALLOWED[$i]=${ALLOWED[$i]%/}
done

# -----------------------
# gather git status entries (porcelain -z)
# -----------------------
ALL_ENTRIES=()
while IFS= read -r -d '' entry; do
  ALL_ENTRIES+=("$entry")
done < <(git status --porcelain=1 -z)

# no changes -> nothing to do
if [[ ${#ALL_ENTRIES[@]} -eq 0 ]]; then
  echo "No working tree changes detected. Nothing to commit."
  exit 0
fi

# -----------------------
# classify entries
# -----------------------
ALLOWED_FILES=()         # files under allowed roots
OUTSIDE_FILES=()         # files outside allowed roots
UNTRACKED_IN_ALLOWED=()  # untracked files inside allowed roots (fatal)
ALL_FILES_LIST=()        # for counting total changed files found

for entry in "${ALL_ENTRIES[@]}"; do
  status="${entry:0:2}"
  raw="${entry:3}"                     # everything after "XY "
  # handle renames "old -> new" -> take RHS
  if [[ "$raw" == *" -> "* ]]; then
    path="${raw##* -> }"
  else
    path="$raw"
  fi
  path=${path#./}
  ALL_FILES_LIST+=("$path")

  # determine whether path is under an allowed root
  in_allowed=false
  for root in "${ALLOWED[@]}"; do
    if [[ "$path" == "$root" || "$path" == "$root/"* ]]; then
      in_allowed=true
      break
    fi
  done

  if $in_allowed; then
    ALLOWED_FILES+=("$path")
    # check untracked (porcelain shows "??")
    if [[ "${status}" == "??" ]]; then
      UNTRACKED_IN_ALLOWED+=("$path")
    fi
  else
    OUTSIDE_FILES+=("$path")
  fi
done

# -----------------------
# enforce: no untracked inside ALLOWED
# -----------------------
if [[ ${#UNTRACKED_IN_ALLOWED[@]} -gt 0 ]]; then
  echo "Error: found untracked files inside allowed roots. Please 'git add' or remove them before committing."
  echo "Untracked files inside allowed roots:"
  for f in "${UNTRACKED_IN_ALLOWED[@]}"; do
    echo "  $f"
  done
  exit 1
fi

# -----------------------
# log outside changes (but don't abort)
# -----------------------
if [[ ${#OUTSIDE_FILES[@]} -gt 0 ]]; then
  echo "Note: there are changes outside the allowed roots; they will NOT be committed by this script."
  echo "Changed files outside allowed roots (first 50 shown):"
  i=0
  for f in "${OUTSIDE_FILES[@]}"; do
    printf '  %s\n' "$f"
    i=$((i+1))
    [[ $i -ge 50 ]] && break
  done
  echo
fi

# -----------------------
# stage allowed roots (includes deletions)
# -----------------------
echo "Staging allowed roots: ${ALLOWED[*]}"
git add -A -- "${ALLOWED[@]}"

# if nothing staged, abort
if [[ -z "$(git diff --cached --name-only)" ]]; then
  echo "No changes staged from allowed roots. Nothing to commit."
  exit 0
fi

# -----------------------
# craft a useful commit message automatically
# -----------------------
CNT=$(git diff --cached --name-only | wc -l | tr -d '[:space:]')
BRANCH=$(git rev-parse --abbrev-ref HEAD)
HEAD_SHORT=$(git rev-parse --short HEAD || echo "none")
TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
ROOT_LABELS=$(IFS=, ; echo "${ALLOWED[*]}")

COMMIT_MSG="chore: commit ${CNT} file(s) under ${ROOT_LABELS} â€” ${TS} (on ${BRANCH} from ${HEAD_SHORT})"

# -----------------------
# commit & push
# -----------------------
git commit -m "$COMMIT_MSG"

# push to origin HEAD
echo "Pushing to origin ${BRANCH}..."
git push origin "HEAD:${BRANCH}"

echo "Copybara"
bazel run devex/editors/emacs:neo
bazel run devex/editors/emacs:neo-extensions

echo "Done. Committed ${CNT} file(s) from allowed roots: ${ROOT_LABELS}."
if [[ ${#OUTSIDE_FILES[@]} -gt 0 ]]; then
  echo "Reminder: changes outside allowed roots were left uncommitted."
fi
