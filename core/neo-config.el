(require 'cl-lib)
(require 'neo-asset)

(defun neo/save-initial-frame-properties (&optional _a)
  "Return an Emacs Lisp snippet that sets default frame properties and the
default face, based on the current frame. This function performs **no I/O**;
it only returns a string suitable to be written by a caller (e.g., your
`neo/fetch` builder lambda contract)."
  (let* ((frame (selected-frame))
         ;; prefer explicit frame param; fall back to face's :font string
         (font   (or (frame-parameter frame 'font)
                     (face-attribute 'default :font nil 'default)))
         (width  (frame-width frame))
         (height (frame-height frame))
         (bg     (face-background 'default nil t))
         (fg     (face-foreground 'default nil t))
         (family (face-attribute 'default :family nil 'default))
         (fheight (face-attribute 'default :height nil 'default)))
    (with-temp-buffer
      ;; Header
      (insert ";; Auto-generated by neo/save-initial-frame-properties\n")
      (insert ";; This file is meant to be loaded early in init to restore UI shape.\n\n")
      ;; default-frame-alist
      (insert "(setq default-frame-alist\n")
      (insert (format "      '((width . %d)\n"  width))
      (insert (format "        (height . %d)\n" height))
      (insert (format "        (font . %S)\n"  font))
      (insert "        (internal-border-width . 2)\n")
      (insert "        (undecorated . nil)))\n\n")
      ;; default face (only include attributes we actually have)
      (insert "(set-face-attribute 'default nil")
      (when bg     (insert (format " :background %S" bg)))
      (when fg     (insert (format " :foreground %S" fg)))
      (when family (insert (format " :family %S"    family)))
      (when (integerp fheight) (insert (format " :height %d" fheight)))
      (insert ")\n")
      (buffer-string))))

(defvar neo/initial-frame-properties (neo/make-asset
				  :name "initial-frame-properties"
				  :extension ".el"
				  :remote #'neo/save-initial-frame-properties))
(neo/ensure neo/initial-frame-properties)

(defvar neo/extensions (neo/make-asset
			:name "neo-extensions"
			:remote "https://github.com/poly-repo/neo-extensions/releases/download/latest/neo-extensions.el"))
(neo/ensure neo/extensions)

(provide 'neo-config)
